#include <bits/stdc++.h>
using namespace std;

int main(void) {
    unordered_map<int, vector<int>> sack;
    sack[1] = {2, 3};
    sack[2] = {3, 4};
    sack[3] = {4, 5};
    sack[4] = {5, 6};

    int n = 4;
    int W = 5;

    int V[n+1][W+1];

    // Initialize the DP table
    for (int i = 0; i <= n; i++)
        for (int w = 0; w <= W; w++)
            V[i][w] = 0;

    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            int item_weight = sack[i][0];
            int item_benefit = sack[i][1];

            if (item_weight <= w) {
                if (i == 3 && V[i-1][w-item_weight] < sack[1][1]) {
                    // If item 3 is picked but item 1 was not picked, we cannot pick item 3
                    V[i][w] = V[i-1][w];
                } else {
                    V[i][w] = max(item_benefit + V[i-1][w-item_weight], V[i-1][w]);
                }
            } else {
                V[i][w] = V[i-1][w];
            }
        }
    }

    // Print the DP table
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= W; j++)
            cout << V[i][j] << " ";
        cout << endl;
    }

    // Output the maximum value
    cout << "Maximum value in Knapsack = " << V[n][W] << endl;

    return 0;
}
